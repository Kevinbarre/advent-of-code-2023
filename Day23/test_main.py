from main import part1, part2, parse_trail, get_possible_steps, navigate_trail, get_all_paths, get_target_position, \
    remove_slopes, get_intersections, get_longest_path_from_intersections

filename = "example.txt"


def test_part1():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part1(lines)
    # Then
    assert result == 94


def test_part2():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part2(lines)
    # Then
    assert result == 154


def test_parse_trail():
    # Given
    lines = ["#.#####################",
             "#.......#########...###",
             "#######.#########.#.###",
             "###.....#.>.>.###.#.###",
             "###v#####.#v#.###.#.###",
             "###.>...#.#.#.....#...#",
             "###v###.#.#.#########.#",
             "###...#.#.#.......#...#",
             "#####.#.#.#######.#.###",
             "#.....#.#.#.......#...#",
             "#.#####.#.#.#########v#",
             "#.#...#...#...###...>.#",
             "#.#.#v#######v###.###v#",
             "#...#.>.#...>.>.#.###.#",
             "#####v#.#.###v#.#.###.#",
             "#.....#...#...#.#.#...#",
             "#.#########.###.#.#.###",
             "#...###...#...#...#.###",
             "###.###.#.###v#####v###",
             "#...#...#.#.>.>.#.>.###",
             "#.###.###.#.###.#.#v###",
             "#.....###...###...#...#",
             "#####################.#"]
    # When
    result = parse_trail(lines)
    # Then
    assert result == ["#########################",
                      "##.######################",
                      "##.......#########...####",
                      "########.#########.#.####",
                      "####.....#.>.>.###.#.####",
                      "####v#####.#v#.###.#.####",
                      "####.>...#.#.#.....#...##",
                      "####v###.#.#.#########.##",
                      "####...#.#.#.......#...##",
                      "######.#.#.#######.#.####",
                      "##.....#.#.#.......#...##",
                      "##.#####.#.#.#########v##",
                      "##.#...#...#...###...>.##",
                      "##.#.#v#######v###.###v##",
                      "##...#.>.#...>.>.#.###.##",
                      "######v#.#.###v#.#.###.##",
                      "##.....#...#...#.#.#...##",
                      "##.#########.###.#.#.####",
                      "##...###...#...#...#.####",
                      "####.###.#.###v#####v####",
                      "##...#...#.#.>.>.#.>.####",
                      "##.###.###.#.###.#.#v####",
                      "##.....###...###...#...##",
                      "######################.##",
                      "#########################"]


def test_get_possible_steps():
    # Given
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    current_position = (1, 2)
    # When
    result = get_possible_steps(trail, current_position, set())
    # Then
    assert result == {(2, 2)}


def test_get_possible_steps_already_visited_cells():
    # Given
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    current_position = (2, 2)
    already_visited_cells = {(1, 2)}
    # When
    result = get_possible_steps(trail, current_position, already_visited_cells)
    # Then
    assert result == {(2, 3)}


def test_get_possible_steps_downhill():
    # Given
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    current_position = (4, 11)
    # When
    result = get_possible_steps(trail, current_position, set())
    # Then
    assert result == {(4, 12)}


def test_navigate_trail():
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    current_position = (1, 2)
    already_visited_cells = frozenset()
    # When
    result = navigate_trail(trail, current_position, already_visited_cells)
    # Then
    assert result == {((2, 2), frozenset({(1, 2)}))}


def test_get_all_paths():
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    starting_position = (1, 2)
    target_position = (23, 22)
    # When
    result = get_all_paths(trail, starting_position, target_position)
    # Then
    assert sorted([len(path) for path in result], reverse=True) == [94, 90, 86, 82, 82, 74]


def test_get_target_position():
    # Given
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    # When
    result = get_target_position(trail)
    # Then
    assert result == (23, 22)


def test_remove_slopes():
    # Given
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.>.>.###.#.####",
             "####v#####.#v#.###.#.####",
             "####.>...#.#.#.....#...##",
             "####v###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########v##",
             "##.#...#...#...###...>.##",
             "##.#.#v#######v###.###v##",
             "##...#.>.#...>.>.#.###.##",
             "######v#.#.###v#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###v#####v####",
             "##...#...#.#.>.>.#.>.####",
             "##.###.###.#.###.#.#v####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    # When
    result = remove_slopes(trail)
    # Then
    assert result == ["#########################",
                      "##.######################",
                      "##.......#########...####",
                      "########.#########.#.####",
                      "####.....#.....###.#.####",
                      "####.#####.#.#.###.#.####",
                      "####.....#.#.#.....#...##",
                      "####.###.#.#.#########.##",
                      "####...#.#.#.......#...##",
                      "######.#.#.#######.#.####",
                      "##.....#.#.#.......#...##",
                      "##.#####.#.#.#########.##",
                      "##.#...#...#...###.....##",
                      "##.#.#.#######.###.###.##",
                      "##...#...#.......#.###.##",
                      "######.#.#.###.#.#.###.##",
                      "##.....#...#...#.#.#...##",
                      "##.#########.###.#.#.####",
                      "##...###...#...#...#.####",
                      "####.###.#.###.#####.####",
                      "##...#...#.#.....#...####",
                      "##.###.###.#.###.#.#.####",
                      "##.....###...###...#...##",
                      "######################.##",
                      "#########################"]


def test_get_intersections():
    # Given
    trail = ["#########################",
             "##.######################",
             "##.......#########...####",
             "########.#########.#.####",
             "####.....#.....###.#.####",
             "####.#####.#.#.###.#.####",
             "####.....#.#.#.....#...##",
             "####.###.#.#.#########.##",
             "####...#.#.#.......#...##",
             "######.#.#.#######.#.####",
             "##.....#.#.#.......#...##",
             "##.#####.#.#.#########.##",
             "##.#...#...#...###.....##",
             "##.#.#.#######.###.###.##",
             "##...#...#.......#.###.##",
             "######.#.#.###.#.#.###.##",
             "##.....#...#...#.#.#...##",
             "##.#########.###.#.#.####",
             "##...###...#...#...#.####",
             "####.###.#.###.#####.####",
             "##...#...#.#.....#...####",
             "##.###.###.#.###.#.#.####",
             "##.....###...###...#...##",
             "######################.##",
             "#########################"]
    end = (23, 22)
    # When
    result = get_intersections(trail, end)
    # Then
    assert result == {(1, 2): {((6, 4), 15)},
                      (6, 4): {((1, 2), 15), ((14, 6), 22), ((4, 12), 22)},
                      (14, 6): {((6, 4), 22), ((14, 14), 12), ((20, 14), 38)},
                      (4, 12): {((6, 4), 22), ((14, 14), 24), ((12, 22), 30)},
                      (14, 14): {((20, 14), 10), ((14, 6), 12), ((12, 22), 18), ((4, 12), 24)},
                      (20, 14): {((14, 14), 10), ((20, 20), 10), ((14, 6), 38)},
                      (12, 22): {((20, 20), 10), ((14, 14), 18), ((4, 12), 30)},
                      (20, 20): {((23, 22), 5), ((12, 22), 10), ((20, 14), 10)}}


def test_get_longest_path_from_intersections():
    # Given
    start = (1, 2)
    end = (23, 22)
    intersections = {(1, 2): {((6, 4), 15)},
                     (6, 4): {((1, 2), 15), ((14, 6), 22), ((4, 12), 22)},
                     (14, 6): {((6, 4), 22), ((14, 14), 12), ((20, 14), 38)},
                     (4, 12): {((6, 4), 22), ((14, 14), 24), ((12, 22), 30)},
                     (14, 14): {((20, 14), 10), ((14, 6), 12), ((12, 22), 18), ((4, 12), 24)},
                     (20, 14): {((14, 14), 10), ((20, 20), 10), ((14, 6), 38)},
                     (12, 22): {((20, 20), 10), ((14, 14), 18), ((4, 12), 30)},
                     (20, 20): {((23, 22), 5), ((12, 22), 10), ((20, 14), 10)}}
    # When
    result = get_longest_path_from_intersections(intersections, start, end)
    # Then
    assert result == 154
