import pytest

from main import part1, part2, parse_patterns, find_distinct_rows, count_columns_before_horizontal_reflection, \
    transpose_pattern, get_summary

filename = "example.txt"


def test_part1():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part1(lines)
    # Then
    assert result == 405


def test_part2():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part2(lines)
    # Then
    assert result == 0


def test_parse_patterns():
    # Given
    lines = ["#.##..##.",
             "..#.##.#.",
             "##......#",
             "##......#",
             "..#.##.#.",
             "..##..##.",
             "#.#.##.#.",
             "",
             "#...##..#",
             "#....#..#",
             "..##..###",
             "#####.##.",
             "#####.##.",
             "..##..###",
             "#....#..#"]
    # When
    result = parse_patterns(lines)
    # Then
    assert len(result) == 2
    assert result[0] == ["#.##..##.",
                         "..#.##.#.",
                         "##......#",
                         "##......#",
                         "..#.##.#.",
                         "..##..##.",
                         "#.#.##.#."]
    assert result[1] == ["#...##..#",
                         "#....#..#",
                         "..##..###",
                         "#####.##.",
                         "#####.##.",
                         "..##..###",
                         "#....#..#"]


def test_find_distinct_rows():
    # Given
    pattern = ["#...##..#",
               "#....#..#",
               "..##..###",
               "#####.##.",
               "#####.##.",
               "..##..###",
               "#....#..#"]
    # When
    result = find_distinct_rows(pattern)
    # Then
    assert result == {"#...##..#": [0],
                      "#....#..#": [1, 6],
                      "..##..###": [2, 5],
                      "#####.##.": [3, 4]}


def test_find_horizontal_reflection():
    # Given
    distinct_rows = {"#...##..#": [0],
                     "#....#..#": [1, 6],
                     "..##..###": [2, 5],
                     "#####.##.": [3, 4]}
    # When
    result = count_columns_before_horizontal_reflection(distinct_rows)
    # Then
    assert result == 4


def test_do_not_find_horizontal_reflection():
    # Given
    distinct_rows = {'#.##..##.': [0],
                     '..#.##.#.': [1, 4],
                     '##......#': [2, 3],
                     '..##..##.': [5],
                     '#.#.##.#.': [6]}
    # When
    result = count_columns_before_horizontal_reflection(distinct_rows)
    # Then
    assert result == 0


def test_transpose_pattern():
    # Given
    pattern = ["#.##..##.",
               "..#.##.#.",
               "##......#",
               "##......#",
               "..#.##.#.",
               "..##..##.",
               "#.#.##.#."]
    # When
    result = transpose_pattern(pattern)
    # Then
    assert result == ["#.##..#",
                      "..##...",
                      "##..###",
                      "#....#.",
                      ".#..#.#",
                      ".#..#.#",
                      "#....#.",
                      "##..###",
                      "..##..."]


@pytest.mark.parametrize("test_input, expected", [(["#.##..##.",
                                                    "..#.##.#.",
                                                    "##......#",
                                                    "##......#",
                                                    "..#.##.#.",
                                                    "..##..##.",
                                                    "#.#.##.#."], 5),
                                                  (["#...##..#",
                                                    "#....#..#",
                                                    "..##..###",
                                                    "#####.##.",
                                                    "#####.##.",
                                                    "..##..###",
                                                    "#....#..#"], 400),
                                                  ([".#.##.#.#######",
                                                    "...##....######",
                                                    "##....##..#.##.",
                                                    ".##..##....#..#",
                                                    "#..##..#.#.....",
                                                    "#......#.#.#..#",
                                                    "##....##..#....",
                                                    "#.#..#.#.##.##.",
                                                    "##.##.##..#.##.",
                                                    "########.#....#",
                                                    "..#..#..####..#",
                                                    "#.#..#.#.#.####",
                                                    "#..##..##...##.",
                                                    "#......###.#..#",
                                                    "#......##...##."], 4),
                                                  (["...##..##....",
                                                    "..##....##...",
                                                    "#.#..##....##",
                                                    "##..####..###",
                                                    "...######....",
                                                    "##...##...###",
                                                    ".#.#....#.#..",
                                                    ".#.##..##.#..",
                                                    "...#.##.#....",
                                                    "##.######.###",
                                                    "#..######..##"], 12),
                                                  (['######.######.###',
                                                    '#.##.#.##..##.#.#',
                                                    '..##..########..#',
                                                    '#....#.#.##.#.#..',
                                                    '#....####..####..',
                                                    '.#..#...#..#...#.',
                                                    '######.#.##.#.###',
                                                    '.#..#..........#.',
                                                    '.####.###..###.##',
                                                    '##..##.#....#.##.',
                                                    '.##.#...####...#.',
                                                    '..##..#..##..#..#',
                                                    '.####..........##'], 10),
                                                  (['..#.##.#......#.#',
                                                    '.##.##.##.##.##.#',
                                                    '##......######...',
                                                    '#..#..#..####..#.',
                                                    '.#..##..#.##.#..#',
                                                    '###.##..######..#',
                                                    '#.#....#.#..#.#..',
                                                    '.##.##.##....##.#',
                                                    '.###..###.##.###.',
                                                    '..######......###',
                                                    '#........#..#....',
                                                    '#..####..####..##',
                                                    '#.#.##.#.#..#.#.#',
                                                    '....##..........#',
                                                    '..#....#..##..#..'], 11),
                                                  (['##.#.#.',
                                                    '#...##.',
                                                    '..##.##',
                                                    '..##.#.',
                                                    '#...##.',
                                                    '#..#..#',
                                                    '#..#.##',
                                                    '#..#.##',
                                                    '#..#..#',
                                                    '#...##.',
                                                    '..##.#.',
                                                    '..##.##',
                                                    '#...##.'], 700),
                                                  (['##..##.',
                                                    '####..#',
                                                    '####..#',
                                                    '..#.##.',
                                                    '###.##.',
                                                    '..#...#',
                                                    '....##.',
                                                    '...#..#',
                                                    '##..##.',
                                                    '###.##.',
                                                    '###.##.',
                                                    '##.####',
                                                    '..#####'], 1)])
def test_get_summary(test_input, expected):
    # Given
    # When
    result = get_summary(test_input)
    # Then
    assert result == expected
